@page "/counter"

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCountByCommand">Click me</button>
<br />
<br />

<Counter2 parameterCountStateService="@parameterCountStateService"></Counter2>

<h1>Parameter Counter </h1>
<p> newed up not injected</p>
<button class="btn btn-primary" @onclick="ParameterIncrementCount">Click me2</button>
<br />
<p>Parameter count: @parameterCount</p>
<br />

<Display></Display>

@code {
    [Inject] IStateService StateService { get; set; }

    [Inject] IComandService CommandService { get; set; }

    IStateService parameterCountStateService { get; set; }

    private ICommand command;

    private int currentCount = 0;

    private int parameterCount = 0;

    private async Task IncrementCountByCommand()
    {
        await CommandService.ExecuteCommandAsync(command);
    }

    private void IncrementCount()
    {
        var result = StateService.Get<Count>(typeof(Count).FullName);
        if (result != null)
        {
            currentCount = result.Current;
        }

        currentCount++;
        StateService.AddOrUpdate<Count>(typeof(Count).FullName, new Count(currentCount));
    }

    private void ParameterIncrementCount()
    {
        var result = parameterCountStateService.Get<Count>(typeof(Count).FullName);
        if (result != null)
        {
            parameterCount = result.Current;
        }

        parameterCount++;
        parameterCountStateService.AddOrUpdate<Count>(typeof(Count).FullName, new Count(parameterCount));
    }

    protected async override Task OnInitializedAsync()
    {
        parameterCountStateService = new StateService();
        //CommandService = new ComandService();
        command = new CountCommand();
        command.Action = () =>
        {
            try
            {
                IncrementCount();
            }
            catch
            {
                return false;
            }

            return true;
        };

        await CommandService.AddCommandAsync(command);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"In OnAfterRenderAsync of : {this.GetType().Name}, firstRender is: {firstRender}");
    }
}
